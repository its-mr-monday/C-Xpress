/*
    CXPRESS COMPILER PARSER WRITTEN IN CXPRESS
    CYBER M TECHNOLOGIES 2022
*/

#INCLUDE <std.lib>
#INCLUDE <std.file>
#framework System
#framework System.IO
#framework System.Text
#framework System.Collections
#framework System.Collections.Generic
#framework System.Linq
#framework System.Text.RegularExpressions
#framework System.Threading
#framework System.Threading.Tasks
#INCLUDE <win.kernel32>


func dllImport(str dll_name, str function) = pointer {
    pointer funct = GetProcAddress(LoadLibrary(dll_name), function);
    if (funct == NULL) {
        throw new Exception("Function not found");
    }
    return funt;
}

func hello_world() = void {
    print("Hello World");
}

func getParserDir() = str {
    str parser_dir = AppContext.BaseDirectory;
    return parser_dir;
}

func variable_dict() = Dictionary<str, str> {
    Dictionary<str, str> dict();
    dict.Add("str", "string");
    dict.Add("uint32", "UInt32");
    dict.Add("int32", "Int32");
    dict.Add("pointer", "IntPtr");
    dict.Add("datetime", "DateTime");
    return dict;
}

//Dictionary<string, string> format_types = new Dictionary<string, string>();
func return_format_types() = Dictionary<str, str> {
    Dictionary<str, str> format_types();
    format_types.Add("TAB", "   ");
    format_types.Add("SPACE", " ");
    format_types.Add("FUNCTIONAL", "var x = some_func(args); || some_func(args);");
    format_types.Add("OBJECT", "Type name(args);");
    format_types.Add("ARRAY", "var[] x[length];");
    return format_types;
}
//Dictionary<string, string> func_translations = new Dictionary<string, string>();
func return_obj_translations() = Dictionary<str, str> {
    Dictionary<str, str> func_translations();
    func_trasnlations.Add("OBJECT", "Type name = new Type(args);");
    func_translations.Add("ARRAY", "var[] x = new var[length];");
    return func_translations;
}

func read_file(str file_name) = str {
    if (fileExists(file_name)) {
        //Use std.file.readFile
        byte[] filedata = readFile(file_name);
        //use std.lib.bytesToStr
        str file = bytesToStr(filedata);
        return file;
    }
    return null;
}

func load_m_files(str[] include_table, str file_path) = str[] {
    str parser = getParserDir();
    str[] files = include_table;
    if (isDir(pathCombine(file_path, "m_files"))) {
        file_path = pathCombine(file_path, "m_files") {
            for (int x = 0;x < files.Length; x++) {
                str file = files[x];
                //Parse the file by removing the #INCLUDE statement
                if (file.Contains("#INCLUDE <")) {
                    file = file.Replace("#INCLUDE <", "");
                    file = file.Replace(">", "");
                    str[] fnames = file.Split(".");
                    str dir = fnames[0];
                    str fname = fnames[1];
                    fname = fname + ".m";
                    fname = Path.Join(parser, "m_files", dir, fname);
                    file[x] = fname;
                }
                else if (file.Contains("#INCLUDE \"")) {
                    file = file.Replace("#INCLUDE \"", "");
                    file = file.Replace("\"", "");
                    str[] fnames = file.Split(".");
                    str dir = fnames[0];
                    str fname = fnames[1];
                    fname = fname + ".m";
                    fname = Path.Join(file_path, dir ,fname);
                    file[x] = fname;
                }
                else {
                    //Could not locate filename
                    file[x] = null;
                }
            }
        }
    }
    return files;
}

func parse_mh_file(str mh_file_path, Dictionary<str, str> function_translations) = Dictionary<str, str> {
    str[] file_lines = readFileLines(mh_file);
    foreach (str line in file_lines) {
        str[] split_line = line.Split(" => ");
        str cs_ver = split_line[1];
        str cx_ver = split_line[0];
        function_translations.Add(cx_ver, cs_ver);
    }
    return function_translations;
}

func format_cs_file(str using_statements, str fname, str[] classes, str[] functions, str main_block, str proj_name) = str {
    str cs_file = "";
    cs_file += using_statements;
    cs_file += "\n";
    cs_file += "namespace " + proj_name + " {\n";
    foreach (str class_ in classes) {
        cs_file += class_ + "\n";
    }
    cs_file += "public class " + fname + "{ \n";
    foreach (str function in functions) {
        cs_file += function + "\n";
    }
    if (main_block != null) {
        cs_file += "public static void Main(string[] args) {\n"
        cs_file += main_block + "\n";
        cs_file += "}\n";
    }
    cs_file += "}\n}\n";
    return cs_file;
}

func remove_comments(str[] file_data) = str[] {
    str[] lines = file_data;
    for (int x = 0; x < lines.Length; x++) {
        str line = lines[x];
        //check if line is a single comment or multicomment and remove it
        
    }
    return lines;
}

func format_function(str[] lines, int func_start) = str {
    //start is the function declaration start line
    if (lines[func_start].Contains("func ") != true) {
        //Function declaration error
        print("[!] Compile Time Error [!]\nError occured in function declaration on line " + func_start.ToString() +
        "\n" + lines[func_start]);
        return null;
    }

    int index = func_start;
    while (index < lines.Length) {
        str line = lines[index];
        if (line.Contains("{")) {
            break;
        }
        index++;
    }
}
//Parse the .NET framework namespaces from #framework x => using x;
func load_framework_files(str[] framework_table, str file_path) = str[] {
    str[] frameworks = framework_table;
    for (int x = 0; x < frameworks.Length; x++) {
        str file = frameworks[x];
        file.Replace("#framework ", "");
        file = "using " + file + ";";
        frameworks[x] = file;
    }
    return frameworks;
}

//Will parse a file at path and return its C# files path
func parse_file(str filename) = Dictionary<str, str[]> {
    //First step is to read the file
    Dictionary<str, str> variable_dict = variable_dict();
    Dictionary<str, str[]> map();
    List<str> m_files();
    List<str> cx_files();
    List<str> frameworks();
    List<str> classes();
    List<str> functions();
    List<str> structs();
    List<str> enums();

    if (isFile(filename) != true) {
        return null;
    }

    str[] fileLines = readFileLines(filename);
    int x = 0;
    while (x < fileLines.Length) {
        str line = fileLines[x];


        //change variable names
        foreach (str key in variable_dict.Keys) {
            str value = variable_dict[key];
            line = line.Replace(key, value);
        }

        x +=1 ;
        //Check if it has a functional statement
    }

    map.Add("M_FILES", m_files.ToArray());
    map.Add("CX_FILES", cx_files.ToArray());
    map.Add("FRAMEWORKS", frameworks.ToArray());
    map.Add("CLASSES", classes.ToArray());
    map.Add("STRUCTS" , structs.ToArray());
    map.Add("FUNCTIONS", functions.ToArray());
    map.Add("ENUMS", enums.ToArray());
    return map;
}

//Parser main to be called by compiler.cx
func parser_main(str[] args) = int {

    if (args[0] == "-h" || args[0] == "--help") {
        print("Usage: cxc.exe <filename> <project name> <project type>");
        print("Example: cxc.exe test.cx test Console");
        return 0;
    }
    if (args.Length < 3) {
        print("Not enough arguments");
        return 0;
    }

    str filename = args[0];
    str proj_name = args[1];
    str proj_type = args[2];

    //Parse the file and all its sub files need to find a way to do this recursively
    Dictionary<str, str[]> map = parse_file(filename);
    if (map == null) {
        print("Could not parse file: " + filename);
        return 0;
    }

    foreach (str file in map["CX_FILES"]) {
        Dictionary<str, str[]> file_map = parse_file(file);
        if (file_map == null) {
            print("Could not parse file: " + file);
            return 0;
        }

    }

    return 0;

}